"use strict";

exports.__esModule = true;
exports.complexityLimitExceededErrorMessage = complexityLimitExceededErrorMessage;
exports.createComplexityLimitRule = createComplexityLimitRule;

var _graphql = require("graphql");

var _warning = _interopRequireDefault(require("warning"));

var _ComplexityVisitor = _interopRequireDefault(require("./ComplexityVisitor"));

exports.ComplexityVisitor = _ComplexityVisitor["default"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function complexityLimitExceededErrorMessage() {
  // By default, don't respond with the cost to avoid leaking information about
  // the cost scheme to a potentially malicious client.
  return 'query exceeds complexity limit';
}

function createComplexityLimitRule(maxCost, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      onCost = _ref.onCost,
      createError = _ref.createError,
      formatErrorMessage = _ref.formatErrorMessage,
      options = _objectWithoutPropertiesLoose(_ref, ["onCost", "createError", "formatErrorMessage"]);

  process.env.NODE_ENV !== "production" ? (0, _warning["default"])(!(createError && formatErrorMessage), 'formatErrorMessage is ignored when createError is specified.') : void 0;
  formatErrorMessage = // eslint-disable-line no-param-reassign
  formatErrorMessage || complexityLimitExceededErrorMessage;
  return function ComplexityLimit(context) {
    var visitor = new _ComplexityVisitor["default"](context, options); // eslint-disable-next-line no-underscore-dangle

    var typeInfo = context._typeInfo || new _graphql.TypeInfo(context.getSchema());
    return {
      Document: {
        enter: function enter(node) {
          (0, _graphql.visit)(node, (0, _graphql.visitWithTypeInfo)(typeInfo, visitor));
        },
        leave: function leave(node) {
          var cost = visitor.getCost();

          if (onCost) {
            onCost(cost, context);
          }

          if (cost > maxCost) {
            context.reportError(createError ? createError(cost, node) : new _graphql.GraphQLError(formatErrorMessage(cost), [node]));
          }
        }
      }
    };
  };
}