"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _graphql = require("graphql");

var _printer = require("graphql/language/printer");

var IntrospectionTypes = _interopRequireWildcard(require("graphql/type/introspection"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// -- code vendored from: https://github.com/graphql/graphql-js/blob/15.x.x/src/validation/rules/OverlappingFieldsCanBeMerged.js#L636-L657
function isSameArguments(arguments1, arguments2) {
  if (!arguments1 || !arguments2) return false;

  if (arguments1.length !== arguments2.length) {
    return false;
  }

  return arguments1.every(function (argument1) {
    var argument2 = arguments2.find(function (_ref) {
      var name = _ref.name;
      return name.value === argument1.name.value;
    });

    if (!argument2) {
      return false;
    }

    return (0, _printer.print)(argument1.value) === (0, _printer.print)(argument2.value);
  });
} // ---


function isSameInlineFragment(selection1, selection2) {
  return selection1.kind === 'InlineFragment' && selection1.typeCondition.name.value === selection2.typeCondition.name.value;
}

function isSameSelection(selection1, selection2) {
  var _selection1$name, _selection2$name;

  return selection1.kind === selection2.kind && ((_selection1$name = selection1.name) == null ? void 0 : _selection1$name.value) === ((_selection2$name = selection2.name) == null ? void 0 : _selection2$name.value) && (isSameInlineFragment(selection1, selection2) || isSameArguments(selection1.arguments, selection2.arguments));
}

function uniqSelections(selections) {
  var results = [];

  var _loop = function _loop() {
    var selection = _step.value;
    var other = results.find(function (s) {
      return isSameSelection(selection, s);
    });

    if (!other) {
      // clone nodes with selections to avoid mutating the original AST below
      results.push(selection.selectionSet ? _extends({}, selection) : selection);
      return "continue";
    }

    var selectionSet = other.selectionSet;

    if (selectionSet) {
      // merge nested selections they will be deduped later on
      other.selectionSet = _extends({}, selectionSet, {
        selections: [].concat(selectionSet.selections, selection.selectionSet.selections)
      });
    }
  };

  for (var _iterator = _createForOfIteratorHelperLoose(selections), _step; !(_step = _iterator()).done;) {
    var _ret = _loop();

    if (_ret === "continue") continue;
  }

  return results;
}

var ComplexityVisitor = /*#__PURE__*/function () {
  function ComplexityVisitor(context, _ref2) {
    var _ref2$scalarCost = _ref2.scalarCost,
        scalarCost = _ref2$scalarCost === void 0 ? 1 : _ref2$scalarCost,
        _ref2$objectCost = _ref2.objectCost,
        objectCost = _ref2$objectCost === void 0 ? 0 : _ref2$objectCost,
        _ref2$listFactor = _ref2.listFactor,
        listFactor = _ref2$listFactor === void 0 ? 10 : _ref2$listFactor,
        _ref2$introspectionLi = _ref2.introspectionListFactor,
        introspectionListFactor = _ref2$introspectionLi === void 0 ? 2 : _ref2$introspectionLi;
    this.context = context;
    this.scalarCost = scalarCost;
    this.objectCost = objectCost;
    this.listFactor = listFactor;
    this.introspectionListFactor = introspectionListFactor;
    this.costFactor = 1;
    this.cost = 0;
    this.Field = {
      enter: this.enterField,
      leave: this.leaveField
    };

    this.FragmentDefinition = function () {
      // don't visit any further we will include these at the spread location
      return false;
    };

    this.SelectionSet = this.flattenFragmentSpreads;
  }

  var _proto = ComplexityVisitor.prototype;

  _proto.flattenFragmentSpreads = function flattenFragmentSpreads(selectionSet) {
    var _this = this;

    var nextSelections = selectionSet.selections.flatMap(function (node) {
      if (node.kind === 'FragmentSpread') {
        var fragment = _this.context.getFragment(node.name.value);

        if (!fragment) return [];
        return _this.flattenFragmentSpreads(fragment.selectionSet).selections;
      }

      return node;
    });
    return _extends({}, selectionSet, {
      selections: uniqSelections(nextSelections)
    });
  };

  _proto.enterField = function enterField() {
    this.costFactor *= this.getFieldCostFactor();
    this.cost += this.costFactor * this.getFieldCost();
  };

  _proto.leaveField = function leaveField() {
    this.costFactor /= this.getFieldCostFactor();
  };

  _proto.getFieldCostFactor = function getFieldCostFactor() {
    var _fieldDef$extensions;

    var fieldDef = this.context.getFieldDef();

    if (fieldDef == null ? void 0 : (_fieldDef$extensions = fieldDef.extensions) == null ? void 0 : _fieldDef$extensions.getCostFactor) {
      return fieldDef.extensions.getCostFactor();
    }

    var directiveCostFactor = this.getDirectiveValue('costFactor');

    if (directiveCostFactor != null) {
      return directiveCostFactor;
    }

    return this.getTypeCostFactor(this.context.getType());
  };

  _proto.getTypeCostFactor = function getTypeCostFactor(type) {
    if (type instanceof _graphql.GraphQLNonNull) {
      return this.getTypeCostFactor(type.ofType);
    }

    if (type instanceof _graphql.GraphQLList) {
      var typeListFactor = this.isIntrospectionList(type) ? this.introspectionListFactor : this.listFactor;
      return typeListFactor * this.getTypeCostFactor(type.ofType);
    }

    return 1;
  };

  _proto.isIntrospectionList = function isIntrospectionList(_ref3) {
    var ofType = _ref3.ofType;
    var type = ofType;

    if (type instanceof _graphql.GraphQLNonNull) {
      type = type.ofType;
    }

    return IntrospectionTypes[type.name] === type;
  };

  _proto.getFieldCost = function getFieldCost() {
    var _fieldDef$extensions2;

    var fieldDef = this.context.getFieldDef();

    if (fieldDef == null ? void 0 : (_fieldDef$extensions2 = fieldDef.extensions) == null ? void 0 : _fieldDef$extensions2.getCost) {
      return fieldDef.extensions.getCost();
    }

    var directiveCost = this.getDirectiveValue('cost');

    if (directiveCost != null) {
      return directiveCost;
    }

    return this.getTypeCost(this.context.getType());
  };

  _proto.getTypeCost = function getTypeCost(type) {
    if (type instanceof _graphql.GraphQLNonNull || type instanceof _graphql.GraphQLList) {
      return this.getTypeCost(type.ofType);
    }

    return type instanceof _graphql.GraphQLObjectType ? this.objectCost : this.scalarCost;
  };

  _proto.getDirectiveValue = function getDirectiveValue(directiveName) {
    var _fieldDef$astNode;

    var fieldDef = this.context.getFieldDef();

    if (!(fieldDef == null ? void 0 : (_fieldDef$astNode = fieldDef.astNode) == null ? void 0 : _fieldDef$astNode.directives)) {
      return null;
    }

    var directive = fieldDef.astNode.directives.find(function (_ref4) {
      var name = _ref4.name;
      return name.value === directiveName;
    });

    if (!directive) {
      return null;
    }

    var valueArgument = directive.arguments.find(function (argument) {
      return argument.name.value === 'value';
    });

    if (!valueArgument) {
      var fieldName = fieldDef.name;
      var parentTypeName = this.context.getParentType().name;
      throw new Error("No `value` argument defined in `@" + directiveName + "` directive " + ("on `" + fieldName + "` field on `" + parentTypeName + "`."));
    }

    return parseFloat(valueArgument.value.value);
  };

  _proto.getCost = function getCost() {
    return this.cost;
  };

  return ComplexityVisitor;
}();

exports["default"] = ComplexityVisitor;